substitutions:
  name: test_solarpid
  # updates: 1s
  # modbus_adress_1: '1'
  # modbus_adress_2: '2'

external_components:
  - source: "github://SeByDocKy/myESPhome/"
    components: [sx1509]
    refresh: 0s
  - source: github://KinDR007/VictronSmartShunt-ESPHOME@main
    components: [victron_smart_shunt]
    refresh: 0s
  - source: "github://SeByDocKy/myESPhome/"
    components: [solarpid]
    refresh: 0s

esphome:
  name: test_solarpid
  # platformio_options:
  #   build_flags:
  #     - -DTEST_COMPONENT
    # build_type: debug
esp32:
  board: esp32dev
  framework:
    type: arduino
    version: 2.0.16 #2.0.5 2.0.9
    platform_version: 6.7.0 #4.4.0 6.2.0

# Enable logging
logger:
    baud_rate : 0
   # level : verbose
    level: info

# Enable Home Assistant API
api:
  # encryption:
  #   key: "4ZgR6lRny3rwmVrfFa6bhd271upzvl1NrWHS57R18fY="

ota:
  - platform: esphome
  # password: "b8bd5a7af4298b4b920725d1b8c3e0c4"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test-solar-pid"
    password: "xVNFwrutRmyc"

# spi:
#     mosi_pin: GPIO23  #11
#     miso_pin: GPIO19
#     clk_pin: GPIO18


time:
  - platform: homeassistant
    id: homeassistant_time  

uart:
  - id: uart_2
    tx_pin: GPIO18
    rx_pin: GPIO19
    baud_rate: 9600
    stop_bits: 2 

  - id: uart_0
    tx_pin: GPIO01
    rx_pin: GPIO03
    baud_rate: 19200
    stop_bits: 1
    rx_buffer_size: 256

modbus:
   id: modbus2
   uart_id: uart_2


victron_smart_shunt:
  uart_id: uart_0


i2c:
  - id: bus_i2c
    sda: GPIO22
    scl: GPIO21
    scan: true
    frequency: 800kHz

sx1509:
  - id: sx1509_hub0
    address: 0x3E
    i2c_id: bus_i2c

output:
  - platform: sx1509
    sx1509_id: sx1509_hub0
    id: output_sx1509_id
    pin: 0
    inverted: true



number:

    ##### Electrovanne potager ####  
    
  - platform: template
    name: setpoint_number  
    id: setpoint_number
    optimistic: true
    unit_of_measurement: 'A'
    icon: mdi:current-dc
    min_value: -20
    max_value: 20
    step: 0.1
    mode: 'slider'
    initial_value: 0
    restore_value: true
    on_value:
       then:
         - solarpid.set_point: 
            id: my_pid1
            new_setpoint: !lambda |-
              return (float(id(setpoint_number).state));
         - solarpid.pid_update:
            id: my_pid1    

  - platform: template
    name: setkp_number  
    id: setkp_number
    optimistic: true
    # unit_of_measurement: 'A'
    # icon: mdi:current-dc
    min_value: 0.0
    max_value: 5.0
    step: 0.05
    mode: 'slider'
    initial_value: 0.1
    restore_value: true
    on_value:
       then:
         - solarpid.set_kp: 
            id: my_pid1
            new_kp: !lambda |-
              return (float(id(setkp_number).state));
         - solarpid.pid_update:
            id: my_pid1    

  - platform: template
    name: setki_number  
    id: setki_number
    optimistic: true
    # unit_of_measurement: 'A'
    # icon: mdi:current-dc
    min_value: 0.0
    max_value: 5.0
    step: 0.05
    mode: 'slider'
    initial_value: 0.1
    restore_value: true
    on_value:
       then:
         - solarpid.set_ki: 
            id: my_pid1
            new_ki: !lambda |-
              return (float(id(setki_number).state));
         - solarpid.pid_update:
            id: my_pid1   

  - platform: template
    name: setkd_number  
    id: setkd_number
    optimistic: true
    # unit_of_measurement: 'A'
    # icon: mdi:current-dc
    min_value: 0.0
    max_value: 5.0
    step: 0.05
    mode: 'slider'
    initial_value: 0.1
    restore_value: true
    on_value:
       then:
         - solarpid.set_kd: 
            id: my_pid1
            new_kd: !lambda |-
              return (float(id(setkd_number).state));                                   
         - solarpid.pid_update:
            id: my_pid1


  - platform: template
    name: setoutputmin_number  
    id: setoutputmin_number
    optimistic: true
    # unit_of_measurement: 'A'
    # icon: mdi:current-dc
    min_value: 0.0
    max_value: 1.0
    step: 0.01
    mode: 'slider'
    initial_value: 0.14
    restore_value: true
    on_value:
       then:
         - solarpid.set_output_min: 
            id: my_pid1
            new_output_min: !lambda |-
              return (float(id(setoutputmin_number).state));                                   
         - solarpid.pid_update:
            id: my_pid1


  - platform: template
    name: setoutputmax_number  
    id: setoutputmax_number
    optimistic: true
    # unit_of_measurement: 'A'
    # icon: mdi:current-dc
    min_value: 0.0
    max_value: 1.0
    step: 0.01
    mode: 'slider'
    initial_value: 0.85
    restore_value: true
    on_value:
       then:
         - solarpid.set_output_max: 
            id: my_pid1
            new_output_max: !lambda |-
              return (float(id(setoutputmax_number).state));                                   
         - solarpid.pid_update:
            id: my_pid1          



switch:

  - platform: restart
    name: restart_switch
    
  - platform: template
    name: activation_voie1
    id: activation_voie1_id
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON


sensor:

  - platform: pzemac
    address: 1
    power:
      name: puissance
      unit_of_measurement: W
      accuracy_decimals: 1
      id: puissance_id
    id: pzem_id
    modbus_id: modbus2

  - platform: victron_smart_shunt
    battery_voltage:
      name: battery_voltage
      id: battery_voltage_id
      
    battery_current:
      name: battery_current
      id: battery_current_id
        
  - platform: solarpid
    id: my_pid1
    activation_id: activation_voie1_id
    input_id: battery_current_id
    setpoint: 0
    kp: 0.8
    ki: 0.01
    kd: 0.05
    output_id: 'output_sx1509_id'
    output_min: 0.13
    output_max: 0.85
    power_id: puissance_id
    pwm_restart: 0.40
    error:
      name: error
      accuracy_decimals: 2
    pwm_output:
      name: pwm_output
      accuracy_decimals: 2
    

############ Power diverter controlled by SSR with a fan or light object #########"
    
    
# light:
  # - platform: monochromatic
    # id: ${ssr_name}_diverter_command
    # name: ${name}_${ssr_name}_diverter_command
    # output: ${ssr_name}_output
    
fan:
  - platform: speed
    id: command
    name: command
    output: output_sx1509_id
